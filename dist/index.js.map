{"version":3,"file":"index.js","sourceRoot":"","sources":["../index.ts"],"names":[],"mappings":"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","sourcesContent":["import * as fs from 'fs';\nimport * as yargs from 'yargs';\nimport * as inquirer from 'inquirer';\nimport * as _ from 'lodash';\nimport * as crypto from 'crypto'\n\nexport interface IAnswer {\n    username: string;\n    password: string;\n    account: string;\n    master_password: string;\n}\n\nexport interface IAccount {\n    username: string;\n    password: string;\n    account: string;\n}\n\nfunction decryptText(text: string, password: string) {\n    if ( password.trim() === \"\" ) {\n        console.log(\"the master password cannot be empty\");\n        process.exit();\n    }\n    const cipher = crypto.createDecipher('aes256', password);\n    let decrypted = \"\";\n    try {\n        decrypted = cipher.update(text, 'binary', 'utf8');\n        decrypted += cipher.final('utf8');\n    } catch (error) {\n        console.log(\"master password is wrong ,retry\");\n        process.exit();\n    }\n    return decrypted;\n}\n\nfunction encryptText(text: string, password: string) {\n    const cipher = crypto.createCipher('aes256', password);\n    let encrypted = cipher.update(text, 'utf8', 'binary');\n    encrypted += cipher.final('binary');\n    return encrypted;\n}\n\nfunction readFile(password: string, cb: Function) {\n    fs.readFile('./accounts.json', (err, accounts) => {\n        let parsed_accounts: Array<IAnswer> = [];\n        if (accounts.byteLength !== 0) {\n            parsed_accounts = JSON.parse(decryptText(accounts.toString(), password));\n        }\n        cb(parsed_accounts);\n    });\n}\n\nfunction writeFile(password: string, data: string, cb: Function) {\n    fs.writeFile('./accounts.json', encryptText(data, password), (err) => {\n        cb(err);\n    });\n}\n\nfunction addAccountToFile(master_password: string, answers: IAccount) {\n    readFile(master_password, (parsed_accounts: Array<IAccount>) => {\n        let exist = _.find(parsed_accounts, { account: answers.account });\n        if (exist) {\n            console.log(\"sorry this account exist change account name\");\n            return;\n        }\n        parsed_accounts.push(answers)\n        let modified_data = JSON.stringify(parsed_accounts);\n        writeFile(master_password, modified_data, (err) => {\n            if (err) throw err;\n        })\n    });\n}\n\nfunction listByAccount(master_password: string, account_to_find: string, cb: Function) {\n    readFile(master_password, (parsed_accounts: Array<IAccount>) => {\n        let filtered_parsed_accounts = _.filter(parsed_accounts, (account: IAccount) => {\n            return _.includes(account.account, account_to_find);\n        })\n        return cb(filtered_parsed_accounts as Array<IAccount>);\n    });\n}\n\nfunction listAllAccounts(master_password: string, cb: Function) {\n    readFile(master_password, (parsed_accounts: Array<IAccount>) => {\n        return cb(parsed_accounts as Array<IAccount>);\n    });\n}\n\nyargs\n    .command('add <account>', 'add a new account', function (yargs) {\n        return yargs.demand(1);\n    }, (argv: any) => {\n        inquirer.prompt([{\n            type: 'input',\n            name: 'master_password',\n            message: 'master password:'\n        }, {\n            type: 'input',\n            name: 'username',\n            message: 'username:'\n        }, {\n            type: 'input',\n            name: 'password',\n            message: 'password:'\n        }]).then((answers: IAnswer) => {\n            answers.account = argv.account;\n            let master_password = answers.master_password;\n            delete answers.master_password;\n            let account = answers;\n            addAccountToFile(master_password, answers);\n        });\n    })\n    .command('account <account>', 'search for an account', function (yargs) {\n        return yargs.demand(1);\n    }, (argv: any) => {\n        inquirer.prompt([{\n            type: 'input',\n            name: 'master_password',\n            message: 'master password:'\n        }]).then((answers: IAnswer) => {\n            listByAccount(answers.master_password, argv.account, (accounts: Array<IAccount>) => {\n                if (accounts.length > 1) {\n                    let account_list = _.map(accounts, (account) => {\n                        return account.account\n                    });\n                    inquirer.prompt([{\n                        type: 'list',\n                        name: 'account_choosen',\n                        message: 'account list',\n                        choices: account_list,\n                        default: account_list[0]\n                    }]).then((answers) => {\n                        let account_choosen = _.find(accounts, { account: answers.account_choosen })\n                        console.log(account_choosen)\n                    });\n                } else {\n                    console.log(accounts);\n                }\n            })\n        });\n    })\n    .command('list', 'list all the accounts', function (yargs) {\n        return yargs.demand(0);\n    }, (argv: any) => {\n        inquirer.prompt([{\n            type: 'input',\n            name: 'master_password',\n            message: 'master password:'\n        }]).then((answers: IAnswer) => {\n            listAllAccounts(answers.master_password, (accounts: Array<IAccount>) => {\n                console.log(\"accounts\", accounts);\n            })\n        })\n    })\n    .command('init', 'init password manager', function (yargs) {\n        return yargs.demand(0);\n    }, (argv: any) => {\n        inquirer.prompt([{\n            type: 'input',\n            name: 'master_password',\n            message: 'master password:'\n        }]).then((answers: IAnswer) => {\n            let arr = [];\n            writeFile(answers.master_password, JSON.stringify(arr), (err) => {\n                if (err) {\n                    console.log(\"sorry something went wrong\");\n                } else {\n                    console.log('account.json initialized!');\n                }\n            })\n        });\n    })\n    .demand(1)\n    .wrap(72)\n    .argv\n"]}